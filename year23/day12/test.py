from math import comb


def split_groups(x, arr):
    rem_tot = sum(arr) - 1
    xlen = len(x)

    if x[0] == '?':
        rem_tot += 1
    if x[-1] == '?':
        rem_tot += 1

    opts = xlen - rem_tot
    print(comb(opts, len(arr) - 1))


def single_group(x, arr):
    rem_tot = sum(arr) - 1
    xlen = len(x)

    opts = xlen - rem_tot
    print(comb(opts, len(arr)))
    return comb(opts, len(arr))


def valid_positions(spring, length):
    valid = []

    for i in range(len(spring) - length + 1):
        
        if i > 0 and spring[i - 1] == '#':
            break

        if spring.find('.', i, i + length) >= 0:
            continue

        if i + length < len(spring) and spring[i + length] == '#':
            continue

        valid.append(i)

    return valid


a = (
    # ('??', (1,)),
    # ('??', (1,)),
    # ('?##', (3,)),
    # ('???', (1,1)),

    ('???.###', (1,1,3)),               # 1
    ('.??..??...?##.', (1,1,3)),        # 4
    ('?#?#?#?#?#?#?#?', (1,3,1,6)),     # 1
    ('????.#...#...', (4,1,1)),         # 1
    ('????.######..#####.', (1,6,5)),   # 4
    ('?###????????', (3,2,1)),          # 10
    ('????.????????', (2,2,1,2)),       #

    # 1
    ('???.###????.###????.###????.###????.###', (1,1,3,1,1,3,1,1,3,1,1,3,1,1,3)),

    # 16384
    ('.??..??...?##.?.??..??...?##.?.??..??...?##.?.??..??...?##.?.??..??...?##.', (1,1,3,1,1,3,1,1,3,1,1,3,1,1,3)),

    # 1
    ('?#?#?#?#?#?#?#???#?#?#?#?#?#?#???#?#?#?#?#?#?#???#?#?#?#?#?#?#???#?#?#?#?#?#?#?', (1,3,1,6,1,3,1,6,1,3,1,6,1,3,1,6,1,3,1,6)),

    # 16 (idx 10)
    ('????.#...#...?????.#...#...?????.#...#...?????.#...#...?????.#...#...', (4,1,1,4,1,1,4,1,1,4,1,1,4,1,1)),

    # 2500
    ('????.######..#####.?????.######..#####.?????.######..#####.?????.######..#####.?????.######..#####.', (1,6,5,1,6,5,1,6,5,1,6,5,1,6,5)),

    # 506250
    ('?###??????????###??????????###??????????###??????????###????????', (3,2,1,3,2,1,3,2,1,3,2,1,3,2,1)),

    #
    ('????.?????????????.?????????????.?????????????.?????????????.????????', (2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2)),
)
#   ??.??#.?????????.???.??#.?????????.???.??#.?????????.???.??#.?????????.???.??#.?????????. 3,2,3,2,3,2,3,2,3,2

s, groups = a[10]
gr_left = []
prev_gr = 0
for n in range(len(groups)):
    print('Checking', groups[n], '-', s)
    v = valid_positions(s, groups[n])
    print('Valid', v)
    if len(v) == 1:
        start = v[0] - 1
        end = v[0] + groups[n] + 1
        start = max(0, start)
        if start:
            gr_left.append((s[:start], groups[prev_gr:n]))
            print('Appending', s[:start], '-', groups[prev_gr:n])
        prev_gr = n + 1
        s = s[end:].lstrip('.')

print()
print('left', s, gr_left)


total = 1
for s, g in gr_left:
    total *= single_group(s, g)
print('Total:', total)


print(single_group(a[-1][0], a[-1][1]))


# for i in a:
#     split_groups(*i)

# print('single')

# single_group(*(a[0]))
# single_group(*(a[1]))
# single_group(*(a[2]))
# single_group(*(a[3]))

# TODO divide by dots
# TODO how to divide by streams of '#'? See:
#   '?###??????????###??????????###??????????###??????????###????????', (3,2,1,3,2,1,3,2,1,3,2,1,3,2,1)